#!/usr/bin/env bash
#
# defaults.sh (ds)
# version 20200412
#
# AGPLv3 License
# Created by github.com/aerobounce on 2019/2/1.
# Copyright Â© 2019-present aerobounce. All rights reserved.
#
set -Cu

# Parser
# $1: Domain name.
# $2: -currentHost. Can be empty.
parse() {
    # Defaults Key and Value.
    local _KEY=""
    local _VALUE=""
    local _EXCLUDE=""

    # Begin writing script.
    # Declare shebang.
    printf '#!/usr/bin/env bash\n\n'

    # Parse XML line by line.
    # shellcheck disable=SC2086
    defaults ${2:-} export "$1" - | while IFS= read -r; do

        # Value type.
        local _VALUE_TYPE="${REPLY#*</}"
        _VALUE_TYPE="${_VALUE_TYPE%>}"

        case "$REPLY" in
            $'\t'"<key>"*)
                # Extract KEY
                _KEY="${REPLY#$'\t'<key>}"
                _KEY=\""${_KEY%</key>}"\"
                _EXCLUDE=$(skip_exporting_key "$_KEY")
                ;;

            $'\t'"<string>"* | $'\t'"<date>"*)
                # Extract Value (String or Date)
                _VALUE="${REPLY/$'\t'<$_VALUE_TYPE>/}"
                _VALUE="-$_VALUE_TYPE '${_VALUE/<\/$_VALUE_TYPE>/}'"
                ;;

            $'\t'"<integer>"*)
                # Extract Value (Integer)
                _VALUE="${REPLY/$'\t'<$_VALUE_TYPE>/}"
                _VALUE="-$_VALUE_TYPE ${_VALUE/<\/$_VALUE_TYPE>/}"
                ;;

            $'\t'"<real>"*)
                # Extract Value (Float)
                _VALUE="${REPLY/$'\t'<$_VALUE_TYPE>/}"
                _VALUE="-float ${_VALUE/<\/$_VALUE_TYPE>/}"
                ;;

            $'\t'"<true/>" | $'\t'"<false/>")
                # Extract Value (Boolean)
                _VALUE="${REPLY/$'\t'</}"
                _VALUE="-boolean ${_VALUE/\/>/}"
                ;;

            $'\t'"<dict/>" | $'\t'"<array/>")
                # Extract Value (Empty Array or Dict)
                _VALUE="'${REPLY#$'\t'}'"
                ;;

            $'\t'"<data>" | $'\t'"<array>" | $'\t'"<dict>")
                # 1. Data, Array or Dict: Tag Begins
                if [ "$_EXCLUDE" = "true" ]; then
                    _KEY=""
                    _VALUE=""
                    continue
                fi
                if [[ -n ${2:-} ]]; then
                    echo "defaults ${2:-} write $1 $_KEY '"$'\n'"${REPLY#$'\t'}"
                else
                    echo "defaults write $1 $_KEY '"$'\n'"${REPLY#$'\t'}"
                fi

                _KEY=""
                _VALUE=""

                continue
                ;;

            $'\t'"</data>" | $'\t'"</array>" | $'\t'"</dict>")
                # 3. Data, Array or Dict: Tag Ends
                if [ "$_EXCLUDE" = "true" ]; then
                    _KEY=""
                    _VALUE=""
                    continue
                fi
                echo "${REPLY#$'\t'}"$'\n'\'

                _KEY=""
                _VALUE=""

                continue
                ;;

            *)
                if [ "$_EXCLUDE" = "true" ]; then
                    continue
                fi
                # 2. Data, Array or Dict: Raw XML

                # Skip XML Declaration, Plist info and Root Tags
                local DOCTYPE='<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" '
                DOCTYPE+='"http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
                [[ $REPLY == '<?xml version="1.0" encoding="UTF-8"?>' ]] && continue
                [[ $REPLY == "$DOCTYPE" ]] && continue
                [[ $REPLY == '<plist version="1.0">' ]] && continue
                [[ $REPLY == "<dict>" ]] && continue
                [[ $REPLY == "</dict>" ]] && continue
                [[ $REPLY == "</plist>" ]] && continue

                # Empty case.
                [[ $REPLY == "<dict/>" ]] && echo "# Empty plist." && continue

                REPLY=${REPLY#$'\t'}
                REPLY=${REPLY//\'/\'\"\'\"\'} # Escape single quote
                echo "$REPLY"
                ;;

        esac

        # If KEY and VALUE are ready, echo result
        [[ -n $_KEY && -n $_VALUE ]] || continue

        if [ "$_EXCLUDE" = "true" ]; then
            _KEY=""
            _VALUE=""
            continue
        fi

        if [[ -n ${2:-} ]]; then
            echo "defaults ${2:-} write $1 $_KEY $_VALUE"
        else
            echo "defaults write $1 $_KEY $_VALUE"
        fi

        _KEY=""
        _VALUE=""
    done
}

skip_exporting_key() {
    local _KEY=$1
    EXCLUDE=false
    if [ ${#_EXCLUDES[@]} -ne 0 ]; then
        CHECK_EXCLUSIONS="true"
        if [ ${#_EXCLUDE_OVERRIDES[@]} -ne 0 ]; then
            for pattern in "${_EXCLUDE_OVERRIDES[@]}"; do
                if [[ "$_KEY" =~ $pattern ]]; then
                    CHECK_EXCLUSIONS="false"
                    break
                fi
            done
        fi
        if [ "$CHECK_EXCLUSIONS" == "true" ]; then
            for pattern in "${_EXCLUDES[@]}"; do
                if [[ "$_KEY" =~ $pattern ]]; then
                    EXCLUDE="true"
                fi
            done
        fi
    fi
    echo "$EXCLUDE"
}

save() {
    (
        local IFS=', '
        local DOMAIN

        # Current Host Domains
        for DOMAIN in $(defaults -currentHost domains) NSGlobalDomain; do
            {
                echo "currentHost" "$DOMAIN"
                parse "$DOMAIN" -currentHost >> "$_OUTPUT_DIR/$DOMAIN.currentHost.sh"
                chmod a+x "$_OUTPUT_DIR/$DOMAIN.currentHost.sh"
            } &
            while [[ $(jobs -p | wc -w) -ge 8 ]]; do sleep 0.1; done
        done
        wait

        # User Domains + NSGlobalDomain
        for DOMAIN in $(defaults domains) NSGlobalDomain; do
            {
                echo "$DOMAIN"
                parse "$DOMAIN" >> "$_OUTPUT_DIR/$DOMAIN.sh"
                chmod a+x "$_OUTPUT_DIR/$DOMAIN.sh"
            } &
            while [[ $(jobs -p | wc -w) -ge 8 ]]; do sleep 0.1; done
        done
        wait
    )
}

usage() {
    local y='\e[1;33m' # Yellow and Bold
    local p='\e[1;35m' # Purple and Bold
    local c='\e[4;36m' # Cyan and Underlined
    local g='\e[0;32m' # Green
    local r='\e[0m'    # Reset

    # shellcheck disable=SC2059
    printf "${p}NAME${r}
    ${y}defaults.sh${r} -- Convert user defaults (plist) into shell script

${p}USAGE${r}
    ${y}ds${r}
    ${y}ds${r} (-d | domain) ${c}<(domain | plist-path)>${r}
    ${y}ds${r} (-d | domain) ${c}<(domain | plist-path)>${r} (-x | exclude) ${c}<(key pattern>${r} (-i | exclude-override) ${c}<(key pattern>${r}
    ${y}ds${r} (-s | save)

${p}DESCRIPTION${r}
    ${y}[no command]${r}
            Shows this help.

    ${y}(-d | domain)${r} ${c}<(domain | plist-path)>${r}
            Prints parsed user defaults of specified domain or .plist file.
            Both of the following commands are valid:
                ${g}$ ds -d com.apple.dock${r}
                ${g}$ ds -d ~/Library/Preferences/com.apple.dock.plist${r}

    ${y}(-x | exclude)${r} ${c}<key pattern>${r}
            Excludes specific keys from domain export. Can be overridden with --exclude-override.
                ${g}ds -d com.apple.dock --exclude 're*' --exclude region${r}

    ${y}(-i | exclude-override)${r} ${c}<key pattern>${r}
            Overrides exclude to keep specific keys in the domain export.
                ${g}ds -d com.apple.dock --exclude 're*' --exclude-override region${r}

    ${y}(-s | save)${r}
            Exports all the defaults to ~/Desktop as executable .sh files.
            Domains are:
                'defaults -currentHost domains' + NSGlobalDomain
                'defaults domains' + NSGlobalDomain
"
    exit 1
}

# Early Exit
[[ $# -eq 0 ]] && usage

# Parse Arguments
_domain() {
    [[ -z ${1:-} ]] && usage
    parse "$1"
}
_save() {
    _OUTPUT_DIR="$HOME/Desktop/ds $(date "+%Y.%m.%d %H.%M.%S")"
    [[ ! -e $_OUTPUT_DIR ]] && mkdir "$_OUTPUT_DIR"
    save
}

_EXCLUDE_OVERRIDES=()
_EXCLUDES=()
_ACTION=""
_DOMAIN=""

while [[ $# -gt 0 ]]; do
    arg="$1"

    case "$arg" in
        domain | -d)
            _DOMAIN="$2"
            _ACTION="domain"
            shift
            shift
            ;;

        save | -s)
            _ACTION="save"
            shift
            ;;

        --exclude-override | -i)
            _EXCLUDE_OVERRIDES+=("$2")
            shift
            shift
            ;;

        --exclude | -x)
            _EXCLUDES+=("$2")
            shift
            shift
            ;;

        *)
            shift
            shift
            ;;
    esac
done

if [ "$_ACTION" == "" ]; then
    usage
    exit 1
fi

if [ "save" == "$_ACTION" ]; then
    _save
else
    if [ ${#_EXCLUDE_OVERRIDES[@]} -ne 0 ] && [ ${#_EXCLUDES[@]} -eq 0 ]; then
        echo "--exclude-override may only be used to override a filter in --exclude"
        exit 1
    fi
    _domain "$_DOMAIN"
fi

exit $?
